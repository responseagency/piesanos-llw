class LocationService {
  async fetchData() {
    try {
      // Always use cache files (pre-generated by prebuild script)
      const cache = await import('../data/locations-cache.json')
      return cache.default?.data || cache.data
    } catch (error) {
      console.error('Error loading locations cache:', error)
      throw new Error('Failed to load locations data from cache. Run "npm run prebuild" to fetch fresh data.')
    }
  }

  async getData() {
    return this.fetchData()
  }

  // Helper methods for working with location data
  formatLocationName(location) {
    const locationName = location.fields?.['Location Name']?.trim() || 'Unknown Location'
    const locationArea = location.fields?.['Location Area']?.trim()

    // Concatenate location name and area for unique identification
    if (locationArea) {
      return `${locationName} - ${locationArea}`
    }

    return locationName
  }

  getLocationSlug(location) {
    const name = this.formatLocationName(location)
    return name.toLowerCase()
      .replace(/\s+/g, '-')           // Replace spaces with dashes
      .replace(/[^a-z0-9-]/g, '')     // Remove non-alphanumeric except dashes
      .replace(/-+/g, '-')            // Collapse multiple dashes into single dash
      .replace(/^-|-$/g, '')          // Remove leading/trailing dashes
  }

  isLocationActive(location) {
    // Assuming locations have an 'Active' field - adjust based on your Airtable schema
    return location.fields?.Active !== false
  }
}

export default new LocationService()